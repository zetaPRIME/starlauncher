


today's agenda {
    maybe add integer snapping for quads
    figure out what to do for json (binary json?) support
} then {
    top screen canvas, parallax layer container
    actual theme drawables, ninepatch
    prerendered bitmap fonts?
}

roadmap {
    maybe switch drawoffset system from a stack to a pass-in
    finish touch input system {
        DragHandle done, maybe some tuning
        ?
    }
    moar utility stuff in Vector2 and VRect {
        -
    }
    tween system
    figure out rotation hotspot etc.
    actual theme drawables
    ninepatch, nontrivial drawable format, fonts, etc.
    figure out theme fallback system
    ...
    Application base class (patterned after XNA/Monogame's Game class)
    use ctrulib sync features for WorkerThread instead of spinlocks at some point
}



drawable, drawcontext, gfxmanager (pushContext, popContext) (done mostly)
ThemeRef (done) {
    theme-asset-specific reference so themes can be reloaded
    -> operator overloaded etc.
}
T H E M E S

configurator for ui elements? maybe crtp after all
noap, macro/include shenanigans
new Button().at(40, 40).within(container).ofSize(64, 32).withText("Popsicles!");
shelved for now because shared_from_this is kind of dumb for what I need it for :D :D :D
(though maybe some trickery with putting the last-created-element in a static, combined with static factory pattern...)

example button, TouchScreenCanvas

precheck version of Dive

maybe LoosePtr (wraps weak_ptr for expired check but references by raw pointer)
implement this to replace weak_ptr parent if it ends up impacting performance too much

maybe implement this: https://probablydance.com/2013/01/13/a-faster-implementation-of-stdfunction/

split stuff into libstarlight {
    namespaces (done except for a couple manager classes)
    actual lib split once everything's working I guess
    "" to <>
}